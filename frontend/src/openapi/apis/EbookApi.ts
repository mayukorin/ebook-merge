/* tslint:disable */
/* eslint-disable */
/**
 * e-book-merge
 * 電子書籍を一元管理
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListEbook,
    ListEbookFromJSON,
    ListEbookToJSON,
} from '../models';

/**
 * 
 */
export class EbookApi extends runtime.BaseAPI {

    /**
     * 電子書籍一覧を取ってくる
     * list-ebooks
     */
    async listEbooksRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListEbook>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/list-ebooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEbookFromJSON(jsonValue));
    }

    /**
     * 電子書籍一覧を取ってくる
     * list-ebooks
     */
    async listEbooks(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListEbook> {
        const response = await this.listEbooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gmailから購入した電子書籍の情報を取ってくる
     * scan-ebooks
     */
    async scanEbooksRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/scan-ebooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gmailから購入した電子書籍の情報を取ってくる
     * scan-ebooks
     */
    async scanEbooks(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.scanEbooksRaw(initOverrides);
    }

    /**
     * テスト-Gmailから購入した電子書籍の情報を取ってくる
     * test-scan-ebooks
     */
    async testScanEbooksRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/test-scan-ebooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * テスト-Gmailから購入した電子書籍の情報を取ってくる
     * test-scan-ebooks
     */
    async testScanEbooks(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.testScanEbooksRaw(initOverrides);
    }

}
